plugins {
    id 'java'
    id "org.springframework.boot" version "$spring_boot_version"
    id "io.spring.dependency-management" version "$spring_dep_version"
    id "war"
    id "application"
}

group = 'com.bwp'
version = "$project_version-$build_status.$build_number"
String main_class = "com.bwp.Main"



repositories {
    mavenCentral()
    maven {
        url "https://maven.pkg.github.com/Quipt-Minecraft/quipt"
        credentials {
            username = "QuickScythe"
            password = System.getenv("PACKAGES_TOKEN")
        }
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-web"
    providedRuntime "org.springframework.boot:spring-boot-starter-tomcat"

    implementation "com.fasterxml.jackson.core:jackson-core:$jackson_version"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jackson_version"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-toml:$jackson_version"
    implementation "org.json:json:$json_version"
    implementation "com.mysql:mysql-connector-j:$mysql_connector_version"

    implementation "com.quiptmc:core:${quipt_version}"
}


test {
    useJUnitPlatform()
}

bootRun{
    mainClass = "${main_class}"
}
bootWar {
    // Deploying to Tomcat ROOT requires the artifact to be named ROOT.war
    archiveFileName = "${rootProject.name}-latest.war"
}
jar {
    manifest {
        attributes(
                'Main-Class': "${main_class}"
        )
    }
}

def targetJavaVersion = Integer.parseInt(java_version)
java {
    withSourcesJar()
    withJavadocJar()
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}